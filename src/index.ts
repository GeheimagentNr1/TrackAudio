import { app, BrowserWindow, ipcMain, IpcMainEvent } from "electron";

import TrackAudioAfv from "../backend/js/trackaudio-afv-wrapper";
import { Configuration } from "./config.d";
import Store from 'electron-store';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

let mainWindow: BrowserWindow = null;

let currentConfiguration: Configuration = {
  audioApi: -1,
  audioInputDeviceId: "",
  headsetOutputDeviceId: "",
  speakerOutputDeviceId: "",
  cid: "",
  password: "",
  callsign: ""
};
const store = new Store();

const saveConfig = () => {
  store.set("configuration", JSON.stringify(currentConfiguration));
};

const setAudioSettings = () => {
  TrackAudioAfv.SetAudioSettings(currentConfiguration.audioApi, currentConfiguration.audioInputDeviceId, currentConfiguration.headsetOutputDeviceId, currentConfiguration.speakerOutputDeviceId);
};

const createWindow = (): void => {
  // load the configuration
  currentConfiguration = JSON.parse(store.get("configuration", "{}") as string) as Configuration;

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 660,
    width: 800,
    minWidth: 265,
    minHeight: 230,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on("set-always-on-top", (event: IpcMainEvent, state: boolean) => {
  mainWindow.setAlwaysOnTop(state);
});

ipcMain.handle("audio-get-apis", () => {
  return TrackAudioAfv.GetAudioApis();
});

ipcMain.handle("audio-get-input-devices", (event: IpcMainEvent, apiId: string) => {
  return TrackAudioAfv.GetAudioInputDevices(apiId);
});

ipcMain.handle("audio-get-output-devices", (event: IpcMainEvent, apiId: string) => {
  return TrackAudioAfv.GetAudioOutputDevices(apiId);
});

ipcMain.handle("get-configuration", () => {
  return currentConfiguration;
});

//
// AFV audio settings
//

ipcMain.handle("set-audio-input-device", (event: IpcMainEvent, deviceId: string) => {
  currentConfiguration.audioInputDeviceId = deviceId;
  saveConfig();
});

ipcMain.handle("set-headset-output-device", (event: IpcMainEvent, deviceId: string) => {
  currentConfiguration.headsetOutputDeviceId = deviceId;
  saveConfig();
});

ipcMain.handle("set-speaker-output-device", (event: IpcMainEvent, deviceId: string) => {
  currentConfiguration.speakerOutputDeviceId = deviceId;
  saveConfig();
});

ipcMain.handle("set-audio-api", (event: IpcMainEvent, apiId: number) => {
  currentConfiguration.audioApi = apiId;
  saveConfig();
});

//
// AFV login settings
// 

ipcMain.handle("set-cid", (event: IpcMainEvent, cid: string) => {
  currentConfiguration.cid = cid;
  saveConfig();
});

ipcMain.handle("set-password", (event: IpcMainEvent, password: string) => {
  currentConfiguration.password = password;
  saveConfig();
});

//
// AFV actions
//

ipcMain.handle("connect", () => {
  setAudioSettings();
  return TrackAudioAfv.Connect(currentConfiguration.cid, currentConfiguration.password, "PF_OBS");
});

ipcMain.handle("disconnect", () => {
  TrackAudioAfv.Disconnect();
});

ipcMain.handle("audio-add-frequency", (event: IpcMainEvent, frequency: number, callsign: string) => {
  return TrackAudioAfv.AddFrequency(frequency, callsign);
});

ipcMain.handle("audio-remove-frequency", (event: IpcMainEvent, frequency: number) => {
  TrackAudioAfv.RemoveFrequency(frequency);
});

ipcMain.handle("audio-set-frequency-state", (event: IpcMainEvent, frequency: number, rx: boolean, tx: boolean, xc: boolean, onSpeaker: boolean) => {
  return TrackAudioAfv.SetFrequencyState(frequency, rx, tx, xc, onSpeaker);
});

ipcMain.handle("audio-get-frequency-state", (event: IpcMainEvent, frequency: number) => {
  return TrackAudioAfv.GetFrequencyState(frequency);
});
